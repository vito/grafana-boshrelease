##################### Grafana Configuration Example #####################
#
# Everything has defaults so you only need to uncomment things you want to
# change

# possible values : production, development
; app_mode = production

# instance name, defaults to HOSTNAME environment variable value or hostname if HOSTNAME var is empty
; instance_name = ${HOSTNAME}

#################################### Paths ####################################
[paths]
# Path to where grafana can store temp files, sessions, and the sqlite3 db (if that is used)
#
data = /var/vcap/store/grafana

#
# Directory where grafana can store logs
#
logs = /var/vcap/sys/log/grafana

#
# Directory where grafana will automatically scan and look for plugins
#
plugins = /var/vcap/store/grafana/plugins

#
#################################### Server ####################################
[server]
# Protocol (http or https)
protocol = <%= p("grafana.ssl.cert", nil) ? "https" : "http" %>

# The ip address to bind to, empty will bind to all interfaces
;http_addr =

# The http port  to use
http_port = <%= p("grafana.listen_port") %>

# The public facing domain name used to access grafana from a browser
;domain = localhost

# Redirect to correct domain if host header does not match domain
# Prevents DNS rebinding attacks
;enforce_domain = false

<% if_p("grafana.root_url") do |root_url| %>
# The full public facing url you use in browser, used for redirects and emails
# If you use reverse proxy and sub path specify full url (with sub path)
root_url = <%= root_url %>
<% end %>

# Log web requests
;router_logging = false

# the path relative working path
;static_root_path = public

# enable gzip
;enable_gzip = false

# https certs & key file
<% if_p("grafana.ssl.cert") do %>
cert_file = /var/vcap/jobs/grafana/config/ssl.crt
cert_key = /var/vcap/jobs/grafana/config/ssl.key
<% end %>

#################################### Database ####################################
[database]
# You can configure the database connection by specifying type, host, name, user and password
# as seperate properties or as on string using the url propertie.

# Either "mysql", "postgres" or "sqlite3", it's your choice
type = sqlite3
;host = 127.0.0.1:3306
;name = grafana
;user = root
# If the password contains # or ; you have to wrap it with trippel quotes. Ex """#password;"""
;password =

# Use either URL or the previous fields to configure the database
# Example: mysql://user:secret@host:port/database
;url =

# For "postgres" only, either "disable", "require" or "verify-full"
;ssl_mode = disable

# For "sqlite3" only, path relative to data_path setting
path = grafana.db

#################################### Session ####################################
[session]
# Either "memory", "file", "redis", "mysql", "postgres", default is "file"
;provider = file

# Provider config options
# memory: not have any config yet
# file: session dir path, is relative to grafana data_path
# redis: config like redis server e.g. `addr=127.0.0.1:6379,pool_size=100,db=grafana`
# mysql: go-sql-driver/mysql dsn config string, e.g. `user:password@tcp(127.0.0.1:3306)/database_name`
# postgres: user=a password=b host=localhost port=5432 dbname=c sslmode=disable
;provider_config = sessions

# Session cookie name
<% if_p("grafana.session.cookie_name") do |name| %>cookie_name = <%= name %><% end %>

# If you use session in https only, default is false
<% if_p("grafana.session.cookie_secure") do |secure| %>cookie_secure = <%= secure %><% end %>

# Session life time, default is 86400
<% if_p("grafana.session.session_life_time") do |lifetime| %>session_life_time = <%= lifetime %><% end %>

#################################### Analytics ####################################
[analytics]
# Server reporting, sends usage counters to stats.grafana.org every 24 hours.
# No ip addresses are being tracked, only simple counters to track
# running instances, dashboard and error counts. It is very helpful to us.
# Change this option to false to disable reporting.
reporting_enabled = false

# Set to false to disable all checks to https://grafana.net
# for new vesions (grafana itself and plugins), check is used
# in some UI views to notify that grafana or plugin update exists
# This option does not cause any auto updates, nor send any information
# only a GET request to http://grafana.net to get latest versions
check_for_updates = false

# Google Analytics universal tracking code, only enabled if you specify an id here
;google_analytics_ua_id =

#################################### Security ####################################
[security]
# default admin user, created on startup
admin_user = <%= p("grafana.admin_username") %>

# default admin password, can be changed before first start of grafana,  or in profile settings
admin_password = <%= p("grafana.admin_password") %>

# used for signing
;secret_key = SW2YcwTIb9zpOOhoPsMm

# Auto-login remember days
;login_remember_days = 7
;cookie_username = grafana_user
;cookie_remember_name = grafana_remember

# disable gravatar profile images
;disable_gravatar = false

# data source proxy whitelist (ip_or_domain:port separated by spaces)
;data_source_proxy_whitelist =

[snapshots]
# snapshot sharing options
external_enabled = <%= p("grafana.snapshots.external_enabled") %>
;external_snapshot_url = https://snapshots-origin.raintank.io
;external_snapshot_name = Publish to snapshot.raintank.io

# remove expired snapshot
;snapshot_remove_expired = true

# remove snapshots after 90 days
;snapshot_TTL_days = 90

#################################### Users ####################################
[users]
# disable user signup / registration
allow_sign_up = <%= p("grafana.users.allow_sign_up") %>

# Allow non admin users to create organizations
allow_org_create = <%= p("grafana.users.allow_organization_creation") %>

# Set to true to automatically assign new users to the default organization (id 1)
auto_assign_org = <%= p("grafana.users.auto_assign_organization") %>

# Default role new users will be automatically assigned (if disabled above is set to true)
auto_assign_org_role = <%= p("grafana.users.auto_assign_organization_role") %>

# Background text for the user field on the login page
;login_hint = email or username

# Default UI theme ("dark" or "light")
;default_theme = dark

[auth]
# Set to true to disable (hide) the login form, useful if you use OAuth, defaults to false
;disable_login_form = false

#################################### Anonymous Auth ##########################
[auth.anonymous]
# enable anonymous access
enabled = <%= p("grafana.auth.anonymous.enabled") %>

# specify organization name that should be used for unauthenticated users
org_name = <%= p("grafana.auth.anonymous.organization") %>

# specify role for unauthenticated users
org_role = <%= p("grafana.auth.anonymous.organization_role") %>

<% if_p("grafana.auth.generic_oauth.enabled", "grafana.auth.generic_oauth.client_id", "grafana.auth.generic_oauth.client_secret") do %>
[auth.generic_oauth]
enabled = true
allow_sign_up = <%= p("grafana.auth.generic_oauth.allow_sign_up") %>
client_id = <%= p("grafana.auth.generic_oauth.client_id") %>
client_secret = <%= p("grafana.auth.generic_oauth.client_secret") %>
scopes = <%= p("grafana.auth.generic_oauth.scopes").join(",") %>
auth_url = <%= p("grafana.auth.generic_oauth.auth_url") %>
token_url = <%= p("grafana.auth.generic_oauth.token_url") %>
api_url = <%= p("grafana.auth.generic_oauth.api_url") %>
team_ids = <%= p("grafana.auth.generic_oauth.team_ids").join(",") %>
allowed_domains = <%= p("grafana.auth.generic_oauth.allowed_domains").join(" ") %>
allowed_organizations = <%= p("grafana.auth.generic_oauth.allowed_organizations").join(" ") %>
<% end %>

<% if_p("grafana.auth.github.enabled", "grafana.auth.github.client_id", "grafana.auth.github.client_secret") do %>
#################################### Github Auth ##########################
[auth.github]
enabled = true
allow_sign_up = <%= p("grafana.auth.github.allow_sign_up") %>
client_id = <%= p("grafana.auth.github.client_id") %>
client_secret = <%= p("grafana.auth.github.client_secret") %>
scopes = user:email,read:org
auth_url = <%= p("grafana.auth.github.auth_url") %>
token_url = <%= p("grafana.auth.github.token_url") %>
api_url = <%= p("grafana.auth.github.api_url") %>
team_ids = <%= p("grafana.auth.github.team_ids").join(",") %>
allowed_domains = <%= p("grafana.auth.github.allowed_email_domains").join(" ") %>
allowed_organizations = <%= p("grafana.auth.github.allowed_organizations").join(" ") %>
<% end %>

<% if_p("grafana.auth.google.enabled", "grafana.auth.google.client_id", "grafana.auth.google.client_secret") do %>
#################################### Google Auth ##########################
[auth.google]
enabled = true
allow_sign_up = <%= p("grafana.auth.google.allow_sign_up") %>
client_id = <%= p("grafana.auth.google.client_id") %>
client_secret = <%= p("grafana.auth.google.client_secret") %>
scopes = https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
auth_url = <%= p("grafana.auth.google.auth_url") %>
token_url = <%= p("grafana.auth.google.token_url") %>
api_url = <%= p("grafana.auth.google.api_url") %>
allowed_domains = <%= p("grafana.auth.google.allowed_email_domains").join(" ") %>
<% end %>

<% if_p("grafana.auth.generic_oauth.enabled", "grafana.auth.generic_oauth.client_id", "grafana.auth.generic_oauth.client_secret", "grafana.auth.generic_oauth.auth_url", "grafana.auth.generic_oauth.token_url", "grafana.auth.generic_oauth.api_url") do %>
#################################### Generic OAuth ##########################
[auth.generic_oauth]
enabled = true
name = <%= p("grafana.auth.generic_oauth.name") %>
allow_sign_up = <%= p("grafana.auth.generic_oauth.allow_sign_up") %>
client_id = <%= p("grafana.auth.generic_oauth.client_id") %>
client_secret = <%= p("grafana.auth.generic_oauth.client_secret") %>
scopes = <%= p("grafana.auth.generic_oauth.scopes").join(" ") %>
auth_url = <%= p("grafana.auth.generic_oauth.auth_url") %>
token_url = <%= p("grafana.auth.generic_oauth.token_url") %>
api_url = <%= p("grafana.auth.generic_oauth.api_url") %>
allowed_domains = <%= p("grafana.auth.generic_oauth.allowed_domains").join(" ") %>
<% if_p("grafana.auth.generic_oauth.tls_client_cert", "grafana.auth.generic_oauth.tls_client_key", "grafana.auth.generic_oauth.tls_client_ca") do %>
tls_client_cert = /var/vcap/jobs/grafana/config/client.crt
tls_client_key = /var/vcap/jobs/grafana/config/client.key
tls_client_ca = /var/vcap/jobs/grafana/config/cacert.pem
<% end %>
<% end %>

#################################### Grafana.net Auth ####################
[auth.grafananet]
;enabled = false
;allow_sign_up = true
;client_id = some_id
;client_secret = some_secret
;scopes = user:email
;allowed_organizations =

<% if_p("grafana.auth.proxy.enabled") do %>
#################################### Auth Proxy ##########################
[auth.proxy]
enabled = true
header_name = <%= p("grafana.auth.proxy.header_name") %>
header_property = <%= p("grafana.auth.proxy.header_property") %>
auto_sign_up = <%= p("grafana.auth.proxy.auto_sign_up") %>
<% end %>

#################################### Basic Auth ##########################
[auth.basic]
;enabled = true

#################################### Auth LDAP ##########################
[auth.ldap]
;enabled = false
;config_file = /etc/grafana/ldap.toml
;allow_sign_up = true

#################################### SMTP / Emailing ##########################
[smtp]
;enabled = false
;host = localhost:25
;user =
;password =
;cert_file =
;key_file =
;skip_verify = false
;from_address = admin@grafana.localhost

[emails]
;welcome_email_on_sign_up = false

#################################### Logging ##########################
[log]
# Either "console", "file", "syslog". Default is console and  file
# Use space to separate multiple modes, e.g. "console file"
;mode = console file

# Either "trace", "debug", "info", "warn", "error", "critical", default is "info"
;level = info

# optional settings to set different levels for specific loggers. Ex filters = sqlstore:debug
;filters =


# For "console" mode only
[log.console]
;level =

# log line format, valid options are text, console and json
;format = console

# For "file" mode only
[log.file]
;level =

# log line format, valid options are text, console and json
;format = text

# This enables automated log rotate(switch of following options), default is true
;log_rotate = true

# Max line number of single file, default is 1000000
;max_lines = 1000000

# Max size shift of single file, default is 28 means 1 << 28, 256MB
;max_size_shift = 28

# Segment log daily, default is true
;daily_rotate = true

# Expired days of log file(delete after max days), default is 7
;max_days = 7

[log.syslog]
;level =

# log line format, valid options are text, console and json
;format = text

# Syslog network type and address. This can be udp, tcp, or unix. If left blank, the default unix endpoints will be used.
;network =
;address =

# Syslog facility. user, daemon and local0 through local7 are valid.
;facility =

# Syslog tag. By default, the process' argv[0] is used.
;tag =


#################################### AMQP Event Publisher ##########################
[event_publisher]
;enabled = false
;rabbitmq_url = amqp://localhost/
;exchange = grafana_events

;#################################### Dashboard JSON files ##########################
[dashboards.json]
enabled = true
path = /var/vcap/store/grafana/dashboards

#################################### Alerting ######################################
[alerting]
# Makes it possible to turn off alert rule execution.
;execute_alerts = true

#################################### Internal Grafana Metrics ##########################
# Metrics available at HTTP API Url /api/metrics
[metrics]
# Disable / Enable internal metrics
;enabled           = true

# Publish interval
;interval_seconds  = 10

# Send internal metrics to Graphite
[metrics.graphite]
# Enable by setting the address setting (ex localhost:2003)
;address =
;prefix = prod.grafana.%(instance_name)s.

#################################### Internal Grafana Metrics ##########################
# Url used to to import dashboards directly from Grafana.net
[grafana_net]
;url = https://grafana.net

#################################### External image storage ##########################
[external_image_storage]
# Used for uploading images to public servers so they can be included in slack/email messages.
# you can choose between (s3, webdav)
<% if_p("grafana.external_image_storage.s3.bucket_url") do %>
provider = s3
<% end %>
<% if_p("grafana.external_image_storage.webdav.url") do %>
provider = webdav
<% end %>

[external_image_storage.s3]
<% if_p("grafana.external_image_storage.s3.bucket_url", "grafana.external_image_storage.s3.access_key", "grafana.external_image_storage.s3.secret_key") do |bucket, key, secret| %>
bucket_url = <%= bucket %>
access_key = <%= key %>
secret_key = <%= secret %>
<% end %>

[external_image_storage.webdav]
<% if_p("grafana.external_image_storage.webdav.url", "grafana.external_image_storage.webdav.username", "grafana.external_image_storage.webdav.password") do |url, user, pass| %>
url = <%= url %>
username = <%= user %>
password = <%= pass %>
<% end %>
